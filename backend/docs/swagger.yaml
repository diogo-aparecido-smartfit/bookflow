basePath: /api
definitions:
  domain.Book:
    description: Book entity representing a book in the system
    properties:
      author:
        description: Autor do livro
        example: J.R.R. Tolkien
        type: string
      cover_url:
        description: URL da capa do livro
        example: https://example.com/cover.jpg
        type: string
      created_at:
        description: Data de criação do registro
        type: string
      description:
        description: Descrição do livro
        example: Uma história épica de fantasia...
        type: string
      id:
        description: ID único do livro
        example: e0c7f36a-9c5e-4c7d-b0a1-596b344f3a0b
        type: string
      isbn:
        description: ISBN do livro
        example: "9788533615120"
        type: string
      status:
        description: Status do livro (available, borrowed, lost)
        enum:
        - available
        - borrowed
        - lost
        example: available
        type: string
      title:
        description: Título do livro
        example: O Senhor dos Anéis
        type: string
      updated_at:
        description: Data de atualização do registro
        type: string
    required:
    - author
    - title
    type: object
  domain.User:
    description: User entity representing a user in the system
    properties:
      created_at:
        description: Data de criação do registro
        type: string
      email:
        description: Email do usuário (único)
        example: joao.silva@example.com
        type: string
      id:
        description: ID único do usuário
        example: a4b8c16e-1d2e-3f4g-5h6i-7j8k9l0m1n2o
        type: string
      name:
        description: Nome do usuário
        example: João Silva
        type: string
      updated_at:
        description: Data de atualização do registro
        type: string
    required:
    - email
    - name
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        example: joao.silva@example.com
        type: string
      password:
        example: senha123
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegistrationRequest:
    properties:
      email:
        example: joao.silva@example.com
        type: string
      name:
        example: João Silva
        type: string
      password:
        example: senha123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        example: joao.silva@example.com
        type: string
      id:
        example: a4b8c16e-1d2e-3f4g-5h6i-7j8k9l0m1n2o
        type: string
      name:
        example: João Silva
        type: string
      updated_at:
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@bookflow.com
    name: API Support
    url: http://www.bookflow.com/support
  description: A book management service API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: BookFlow API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all books
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: List books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the database
      parameters:
      - description: Book information
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a book
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book information
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a book
      tags:
      - books
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              token:
                type: string
              user:
                $ref: '#/definitions/dto.UserResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: User registration data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              user:
                $ref: '#/definitions/dto.UserResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new user to the database
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
